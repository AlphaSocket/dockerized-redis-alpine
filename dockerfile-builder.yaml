project: 
  title: &project_title alphasocket/dockerized-redis-alpine
  codename: &project_codename redis-alpine
  description: Redis service with pass configurable in ENV
#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    paths:
      config:
        redis: /etc/redis/
    name: *project_codename
    from: redis:alpine
    cmd: 'docker-entrypoint.sh $CONFIG_PATHS_CONFIG_REDIS --requirepass \"$CONFIG_REDIS_PASS\"'
    # Redis
    redis:        
      port: 6379
    ports:
      main:
        valueFromParse: $BUILD_REDIS_PORT
  imports:
    - "imports/templates:/usr/local/templates"

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: ""
      config: gettext
    paths:
      config:
        redis: /etc/redis
  # Setup Processes
  processes:
    - title: "Setup config folder"
      shell_condition: '! -d "$BUILD_PATHS_CONFIG_REDIS"'
      commands:
       - mkdir -p $BUILD_PATHS_CONFIG_REDIS
#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    groups:
      main:
        id: 1063
        name: 'redis'
    users:
      main: 
        id: 1063
        name: 'redis'
        groups: 'redis'
    paths:
      templates:
        redis: /usr/local/templates/redis.conf
      config:
        redis:
          valueFromParse: $BUILD_PATHS_CONFIG_REDIS/redis.conf
    redis:
      persistence: 'yes'
      persistence_path: '/data'
      pass: redis-default-pass

  processes:
    - title: "Create server conf"
      commands:
       - envsubst < $CONFIG_PATHS_TEMPLATES_REDIS > $CONFIG_PATHS_CONFIG_REDIS
       
    - title: "Enforce permissions on data"
      shell_condition: '"$CONFIG_REDIS_PERSISTENCE_PATH" = "yes"'
      commands:
       - chown -R ${CONFIG_USERS_MAIN_NAME}:${CONFIG_GROUPS_MAIN_NAME} ${CONFIG_REDIS_PERSISTENCE_PATH}

test:
  envvars:
    redis:
      pass: testPasswordRedis

  processes:
    #
    # Starting
    #
    - title: "Starting container" 
      commands:
        - TEST_CONTAINER_REDIS_ID=$(
            docker run 
              -d --name=$TEST_CONTAINER_NAME
              -p 127.0.0.1:${TEST_HOST_PORT}:${BUILD_PORTS_MAIN}
              -e CONFIG_REDIS_PASS=${TEST_REDIS_PASS}
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )
        - sleep 1
        - TEST_CONTAINER_REDIS_STATUS=$( docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_REDIS_ID)

    - title: "Testing container"
      shell_condition: '! "$TEST_CONTAINER_REDIS_STATUS" = "true"'
      commands:
        - echo "Container failed, print logs and exiting\n"
        - docker logs $TEST_CONTAINER_REDIS_ID
        - exit 1

    #
    # TESTING
    #
    - title: "Testing service"
      commands:
        - PING_RESULT=$( redis-cli -p ${TEST_HOST_PORT} -a ${TEST_REDIS_PASS} ping )

    - title: "Checking"
      shell_condition: '! "$PING_RESULT" = "PONG"'
      commands:
        - echo "### Test failed, received ${PING_RESULT} printing log\n" 
        - docker logs $TEST_CONTAINER_REDIS_ID
        - exit 1

    - title: "Success"
      shell_condition: '"$PING_RESULT" = "PONG"'
      commands:
        - echo "### Test Succeeded, received ${PING_RESULT}\n" 
