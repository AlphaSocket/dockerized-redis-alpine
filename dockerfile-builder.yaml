project: 
  title: &project_title alphasocket/dockerized-redis-alpine
  codename: &project_codename redis-alpine
  description: Redis service with pass configurable in ENV
  
#
# Init builder
#
general:
  envvars:
    docker:
      user: &general_docker_user 03192859189254 
    keys:
      True: "True"
      false: "False"
      dev: "dev"
      prd: "prd"
    
#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    name: *project_codename
    branch:
      valueFromCommand: 'git rev-parse --abbrev-ref HEAD'
    commit:
      valueFromCommand: 'git rev-parse --short HEAD'
    version:
      valueFromCommand: 'echo $BUILD_BRANCH | cut -d \- -f 1'
    env:
      valueFromCommand: 'env=$(echo $BUILD_BRANCH | cut -d \- -f 2); [ "$env" = "$BUILD_VERSION" ] && echo $GENERAL_KEYS_PRD || echo $env'
    # Redis
    redis:
      port: 6379
    # Docker
    dockerfile:
      image: redis:alpine
      ports:
        main: $BUILD_REDIS_PORT
      cmd:  'docker-entrypoint.sh --requirepass \"$CONFIG_REDIS_PASS\"'

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: ""
      config: ""
#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    redis:
      pass: redis-default-pass

test:
  envvars:
    name: $BUILD_NAME
    port: 30080
    dockerfile:
      tag: 
        user: *general_docker_user
        name: $BUILD_NAME
        version: $BUILD_BRANCH

  processes:
    #
    # Starting
    #
    - title: "Starting container"
      commands:
        - TEST_CONTAINER_REDIS_ID=$(
            docker run 
              -d --name=$TEST_NAME
              -p 127.0.0.1:${TEST_PORT}:${BUILD_DOCKERFILE_PORTS_MAIN}
              -e CONFIG_REDIS_PASS=${TEST_PASS}
              ${TEST_DOCKERFILE_TAG_USER}/${TEST_DOCKERFILE_TAG_NAME}:${TEST_DOCKERFILE_TAG_VERSION}
          )
        - TEST_CONTAINER_REDIS_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_REDIS_ID)

    - title: "Testing container"
      shell_condition: '! "$TEST_CONTAINER_REDIS_STATUS" = "true"'
      commands:
        - echo "Container failed, print logs and exiting\n"
        - docker logs $TEST_CONTAINER_REDIS_ID
        - exit 1

    #
    # TESTING
    #
    - title: "Testing service"
      commands:
        - apt install redis-cli -y
        - PING_RESULT=$( sleep 1 && redis-cli ping -p ${TEST_PASS})

    - title: "Checking"
      shell_condition: '! "$PING_RESULT" = "pong"'
      commands:
        - echo "### Test failed, received ${PING_RESULT} printing log\n" 
        - docker logs $TEST_CONTAINER_REDIS_ID
        - exit 1

    - title: "Success"
      shell_condition: '"$PING_RESULT" = "pong"'
      commands:
        - echo "### Test Succeeded, received ${PING_RESULT}\n" 
