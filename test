#!/bin/sh

#
# Local test script to build and test docker image
#

# exit if a command fails
set -e

CURL=$(which curl)
DOCKER=$(which docker)

if [ CURL = '' ]; then
    echo 'The package curl is required\n'
    exit 1
fi

if [ DOCKER = '' ]; then
    echo 'Docker is required\n'
    exit 1
fi

echo "#\n# Building image\n#\n"
docker build \
    --no-cache \
    -t 03192859189254/redis-alpine:latest \
    --build-arg BUILD_COMMIT=`git rev-parse --short HEAD` \
    --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
    .

echo "#\n# Cleaning docker\n#\n"
running_containers=$(docker ps -aq)
if [ "$running_containers" ] 
    then
        docker stop $running_containers -t 0 && docker system prune -f
fi

echo "#\n# Running test\n#\n"
# Starting container
TEST_CONTAINER_REDIS_ID=$( docker run -d --name=redis-alpine -p 127.0.0.1:30080:6379 -e CONFIG_REDIS_PASS=${TEST_PASS} 03192859189254/redis-alpine:latest )
TEST_CONTAINER_REDIS_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_REDIS_ID)

# Testing container
if [ ! "$TEST_CONTAINER_REDIS_STATUS" = "true" ]; then
    echo "Container failed, print logs and exiting\n";
    docker logs $TEST_CONTAINER_REDIS_ID;
    exit 1;
fi
# Testing service
sudo apt install redis-cli -y
PING_RESULT=$( redis-cli ping -p 30080 -a ${TEST_PASS} )

# Checking
if [ ! "$PING_RESULT" = "pong" ]; then
    echo "### Test failed, received ${PING_RESULT} printing log\n";
    docker logs $TEST_CONTAINER_REDIS_ID;
    exit 1;
fi
# Success
if [ "$PING_RESULT" = "pong" ]; then
    echo "### Test Succeeded, received ${PING_RESULT}\n";
fi


exit 0