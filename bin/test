#!/bin/sh

#
# Local test script to test docker images
#

# exit if a command fails
set -e

CURL=$(which curl)
DOCKER=$(which docker)

if [ "$CURL" = '' ]; then
    echo 'The package curl is required\n'
    exit 1
fi

if [ "$DOCKER" = '' ]; then
    echo 'Docker is required\n'
    exit 1
fi

echo "#\n# Cleaning docker\n#\n"
running_containers=$(docker ps -aq)
if [ "$running_containers" ] 
    then
        docker stop $running_containers -t 0 && docker system prune -f
fi
echo "# Cleaned"

echo "#\n# Running test\n#\n"
# Starting container
echo "### Starting container..."
TEST_CONTAINER_REDIS_ID=$( docker run -d --name=redis-alpine -p 127.0.0.1:30168:6379 -e CONFIG_REDIS_PASS=testPasswordRedis 03192859189254/redis-alpine:latest )
sleep 1
TEST_CONTAINER_REDIS_STATUS=$( docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_REDIS_ID)

# Testing container
echo "### Testing container..."
if [ ! "$TEST_CONTAINER_REDIS_STATUS" = "true" ]; then
    echo "Container failed, print logs and exiting\n";
    docker logs $TEST_CONTAINER_REDIS_ID;
    exit 1;
fi
# Testing service
echo "### Testing service..."
PING_RESULT=$( redis-cli -p 30168 -a testPasswordRedis ping )

# Checking
echo "### Checking..."
if [ ! "$PING_RESULT" = "PONG" ]; then
    echo "### Test failed, received ${PING_RESULT} printing log\n";
    docker logs $TEST_CONTAINER_REDIS_ID;
    exit 1;
fi
# Success
echo "### Success..."
if [ "$PING_RESULT" = "PONG" ]; then
    echo "### Test Succeeded, received ${PING_RESULT}\n";
fi


exit 0